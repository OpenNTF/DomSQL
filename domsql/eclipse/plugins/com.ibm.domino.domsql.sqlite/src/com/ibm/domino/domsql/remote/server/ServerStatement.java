/*
 * © Copyright IBM Corp. 2010
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at:
 * 
 * http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or 
 * implied. See the License for the specific language governing 
 * permissions and limitations under the License.
 */
package com.ibm.domino.domsql.remote.server;

import java.rmi.RemoteException;
import java.sql.SQLException;
import java.sql.SQLWarning;

import com.ibm.domino.domsql.remote.transport.IResultSet;
import com.ibm.domino.domsql.remote.transport.IStatement;
import com.ibm.domino.domsql.sqlite.driver.jdbc.DomSQLStatement;

/**
 *
 */
public class ServerStatement extends ServerObject implements IStatement {

	private static final long serialVersionUID = 1L;
	
    private DomSQLStatement statement;
    
    public ServerStatement(ServerConnection connection, DomSQLStatement statement) throws RemoteException {
        super(connection);
        this.statement = statement;
    }
    
    public DomSQLStatement getNative() {
    	return statement;
    }

    public void unreferenced() {
    	statement = null;
    }
    
    
    // ===========================================================
    // Delegation
    // ===========================================================
    
    public <T> T unwrap(Class<T> iface) throws SQLException, RemoteException {
        return statement.unwrap(iface);
    }

    public boolean isWrapperFor(Class<?> iface) throws SQLException, RemoteException {
        return statement.isWrapperFor(iface);
    }

    
    
    public void addBatch(String sql) throws SQLException, RemoteException {
        initContext();
        try {
            statement.addBatch(sql);
        } finally {
            termContext();
        }
    }

    public void cancel() throws SQLException, RemoteException {
        initContext();
        try {
            statement.cancel();
        } finally {
            termContext();
        }
    }

    public void clearBatch() throws SQLException, RemoteException {
        initContext();
        try {
            statement.clearBatch();
        } finally {
            termContext();
        }
    }

    public void clearWarnings() throws SQLException, RemoteException {
        initContext();
        try {
            statement.clearWarnings();
        } finally {
            termContext();
        }
    }

    public void close() throws SQLException, RemoteException {
        initContext();
        try {
            statement.close();
        } finally {
            termContext();
        }
    }

    public boolean execute(String sql) throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.execute(sql));
        } finally {
            termContext();
        }
    }

    public boolean execute(String sql, int autoGeneratedKeys)
            throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.execute(sql, autoGeneratedKeys));
        } finally {
            termContext();
        }
    }

    public boolean execute(String sql, int[] columnIndexes) throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.execute(sql, columnIndexes));
        } finally {
            termContext();
        }
    }

    public boolean execute(String sql, String[] columnNames)
            throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.execute(sql, columnNames));
        } finally {
            termContext();
        }
    }

    public int[] executeBatch() throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.executeBatch());
        } finally {
            termContext();
        }
    }

    public IResultSet executeQuery(String sql) throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.executeQuery(sql));
        } finally {
            termContext();
        }
    }

    public int executeUpdate(String sql) throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.executeUpdate(sql));
        } finally {
            termContext();
        }
    }

    public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.executeUpdate(sql, autoGeneratedKeys));
        } finally {
            termContext();
        }
    }

    public int executeUpdate(String sql, int[] columnIndexes)
            throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.executeUpdate(sql, columnIndexes));
        } finally {
            termContext();
        }
    }

    public int executeUpdate(String sql, String[] columnNames)
            throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.executeUpdate(sql, columnNames));
        } finally {
            termContext();
        }
    }

    public int getFetchDirection() throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.getFetchDirection());
        } finally {
            termContext();
        }
    }

    public int getFetchSize() throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.getFetchSize());
        } finally {
            termContext();
        }
    }

    public IResultSet getGeneratedKeys() throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.getGeneratedKeys());
        } finally {
            termContext();
        }
    }

    public int getMaxFieldSize() throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.getMaxFieldSize());
        } finally {
            termContext();
        }
    }

    public int getMaxRows() throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.getMaxRows());
        } finally {
            termContext();
        }
    }

    public boolean getMoreResults() throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.getMoreResults());
        } finally {
            termContext();
        }
    }

    public boolean getMoreResults(int current) throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.getMoreResults(current));
        } finally {
            termContext();
        }
    }

    public int getQueryTimeout() throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.getQueryTimeout());
        } finally {
            termContext();
        }
    }

    public IResultSet getResultSet() throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.getResultSet());
        } finally {
            termContext();
        }
    }

    public int getResultSetConcurrency() throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.getResultSetConcurrency());
        } finally {
            termContext();
        }
    }

    public int getResultSetHoldability() throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.getResultSetHoldability());
        } finally {
            termContext();
        }
    }

    public int getResultSetType() throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.getResultSetType());
        } finally {
            termContext();
        }
    }

    public int getUpdateCount() throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.getUpdateCount());
        } finally {
            termContext();
        }
    }

    public SQLWarning getWarnings() throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.getWarnings());
        } finally {
            termContext();
        }
    }

    public void setCursorName(String name) throws SQLException, RemoteException {
        initContext();
        try {
            statement.setCursorName(name);
        } finally {
            termContext();
        }
    }

    public void setEscapeProcessing(boolean enable) throws SQLException, RemoteException {
        initContext();
        try {
            statement.setEscapeProcessing(enable);
        } finally {
            termContext();
        }
    }

    public void setFetchDirection(int direction) throws SQLException, RemoteException {
        initContext();
        try {
            statement.setFetchDirection(direction);
        } finally {
            termContext();
        }
    }

    public void setFetchSize(int rows) throws SQLException, RemoteException {
        initContext();
        try {
            statement.setFetchSize(rows);
        } finally {
            termContext();
        }
    }

    public void setMaxFieldSize(int max) throws SQLException, RemoteException {
        initContext();
        try {
            statement.setMaxFieldSize(max);
        } finally {
            termContext();
        }
    }

    public void setMaxRows(int max) throws SQLException, RemoteException {
        initContext();
        try {
            statement.setMaxRows(max);
        } finally {
            termContext();
        }
    }

    public void setQueryTimeout(int seconds) throws SQLException, RemoteException {
        initContext();
        try {
            statement.setQueryTimeout(seconds);
        } finally {
            termContext();
        }
    }

    public boolean isClosed() throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.isClosed());
        } finally {
            termContext();
        }
    }

    public void setPoolable(boolean poolable) throws SQLException, RemoteException {
        initContext();
        try {
            statement.setPoolable(poolable);
        } finally {
            termContext();
        }
    }

    public boolean isPoolable() throws SQLException, RemoteException {
        initContext();
        try {
            return wrap(statement.isPoolable());
        } finally {
            termContext();
        }
    }
}
