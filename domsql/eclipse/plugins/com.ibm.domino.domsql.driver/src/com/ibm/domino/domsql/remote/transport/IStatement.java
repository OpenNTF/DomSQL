/*
 * © Copyright IBM Corp. 2010
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at:
 * 
 * http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or 
 * implied. See the License for the specific language governing 
 * permissions and limitations under the License.
 */
package com.ibm.domino.domsql.remote.transport;

import java.rmi.RemoteException;
import java.sql.SQLException;
import java.sql.SQLWarning;


/**
 *
 */
public interface IStatement extends IRemoteObject {

	public void addBatch(String sql) throws SQLException, RemoteException;
	public void cancel() throws SQLException, RemoteException;
	public void clearBatch() throws SQLException, RemoteException;
	public void clearWarnings() throws SQLException, RemoteException;
	public void close() throws SQLException, RemoteException;
	public boolean execute(String sql) throws SQLException, RemoteException;
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException, RemoteException;
	public boolean execute(String sql, int[] columnIndexes) throws SQLException, RemoteException;
	public boolean execute(String sql, String[] columnNames) throws SQLException, RemoteException;
	public int[] executeBatch() throws SQLException, RemoteException;
	public IResultSet executeQuery(String sql) throws SQLException, RemoteException;
	public int executeUpdate(String sql) throws SQLException, RemoteException;
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException, RemoteException;
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException, RemoteException;
	public int executeUpdate(String sql, String[] columnNames) throws SQLException, RemoteException;
	public int getFetchDirection() throws SQLException, RemoteException;
	public int getFetchSize() throws SQLException, RemoteException;
	public IResultSet getGeneratedKeys() throws SQLException, RemoteException;
	public int getMaxFieldSize() throws SQLException, RemoteException;
	public int getMaxRows() throws SQLException, RemoteException;
	public boolean getMoreResults() throws SQLException, RemoteException;
	public boolean getMoreResults(int current) throws SQLException, RemoteException;
	public int getQueryTimeout() throws SQLException, RemoteException;
	public IResultSet getResultSet() throws SQLException, RemoteException;
	public int getResultSetConcurrency() throws SQLException, RemoteException;
	public int getResultSetHoldability() throws SQLException, RemoteException;
	public int getResultSetType() throws SQLException, RemoteException;
	public int getUpdateCount() throws SQLException, RemoteException;
	public SQLWarning getWarnings() throws SQLException, RemoteException;
	public void setCursorName(String name) throws SQLException, RemoteException;
	public void setEscapeProcessing(boolean enable) throws SQLException, RemoteException;
	public void setFetchDirection(int direction) throws SQLException, RemoteException;
	public void setFetchSize(int rows) throws SQLException, RemoteException;
	public void setMaxFieldSize(int max) throws SQLException, RemoteException;
	public void setMaxRows(int max) throws SQLException, RemoteException;
	public void setQueryTimeout(int seconds) throws SQLException, RemoteException;
	public boolean isClosed() throws SQLException, RemoteException;
	public void setPoolable(boolean poolable) throws SQLException, RemoteException;
	public boolean isPoolable() throws SQLException, RemoteException;
}
