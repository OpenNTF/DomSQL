/*
 * © Copyright IBM Corp. 2010
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at:
 * 
 * http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or 
 * implied. See the License for the specific language governing 
 * permissions and limitations under the License.
 */
package com.ibm.domino.domsql.remote.transport;

import java.rmi.RemoteException;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.util.Map;
import java.util.Properties;


/**
 *
 */
public interface IConnection extends IRemoteObject {

	// Regular Connection methods
	public void clearWarnings() throws SQLException, RemoteException;
	public void close() throws SQLException, RemoteException;
	public void commit() throws SQLException, RemoteException;
	public IStatement createStatement() throws SQLException, RemoteException;
	public IStatement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException, RemoteException;
	public IStatement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException, RemoteException;
	public boolean getAutoCommit() throws SQLException, RemoteException;
	public String getCatalog() throws SQLException, RemoteException;
	public int getHoldability() throws SQLException, RemoteException;
	public IDatabaseMetaData getMetaData() throws SQLException, RemoteException;
	public int getTransactionIsolation() throws SQLException, RemoteException;
	public Map<String, Class<?>> getTypeMap() throws SQLException, RemoteException;
	public SQLWarning getWarnings() throws SQLException, RemoteException;
	public boolean isClosed() throws SQLException, RemoteException;
	public boolean isReadOnly() throws SQLException, RemoteException;
	public String nativeSQL(String sql) throws SQLException, RemoteException;
	public ICallableStatement prepareCall(String sql) throws SQLException, RemoteException;
	public ICallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException, RemoteException;
	public ICallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException, RemoteException;
	public IPreparedStatement prepareStatement(String sql) throws SQLException, RemoteException;
	public IPreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException, RemoteException;
	public IPreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException, RemoteException;
	public IPreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException, RemoteException;
	public IPreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException, RemoteException;
	public IPreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException, RemoteException;
	public void releaseSavepoint(SSavepoint savepoint) throws SQLException, RemoteException;
	public void rollback() throws SQLException, RemoteException;
	public void rollback(SSavepoint savepoint) throws SQLException, RemoteException;
	public void setAutoCommit(boolean autoCommit) throws SQLException, RemoteException;
	public void setCatalog(String catalog) throws SQLException, RemoteException;
	public void setHoldability(int holdability) throws SQLException, RemoteException;
	public void setReadOnly(boolean readOnly) throws SQLException, RemoteException;
	public SSavepoint setSavepoint() throws SQLException, RemoteException;
	public SSavepoint setSavepoint(String name) throws SQLException, RemoteException;
	public void setTransactionIsolation(int level) throws SQLException, RemoteException;
	public void setTypeMap(Map<String, Class<?>> map) throws SQLException, RemoteException;
	public SClob createClob() throws SQLException, RemoteException;
	public SBlob createBlob() throws SQLException, RemoteException;
	public SNClob createNClob() throws SQLException, RemoteException;
	public SSQLXML createSQLXML() throws SQLException, RemoteException;
	public boolean isValid(int timeout) throws SQLException, RemoteException;
	public void setClientInfo(String name, String value) throws SQLClientInfoException, RemoteException;
	public void setClientInfo(Properties properties) throws SQLClientInfoException, RemoteException;
	public String getClientInfo(String name) throws SQLException, RemoteException;
	public Properties getClientInfo() throws SQLException, RemoteException;
	public SArray createArrayOf(String typeName, Object[] elements) throws SQLException, RemoteException;
	public SStruct createStruct(String typeName, Object[] attributes) throws SQLException, RemoteException;
	
	// Extra methods
}
